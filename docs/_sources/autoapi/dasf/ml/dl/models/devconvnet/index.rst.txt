:py:mod:`dasf.ml.dl.models.devconvnet`
======================================

.. py:module:: dasf.ml.dl.models.devconvnet


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dasf.ml.dl.models.devconvnet.MyAccuracy
   dasf.ml.dl.models.devconvnet.NNModule
   dasf.ml.dl.models.devconvnet.TorchPatchDeConvNet
   dasf.ml.dl.models.devconvnet.TorchPatchDeConvNetSkip
   dasf.ml.dl.models.devconvnet.TorchSectionDeConvNet
   dasf.ml.dl.models.devconvnet.TorchSectionDeConvNetSkip




.. py:class:: MyAccuracy(dist_sync_on_step=False)


   Bases: :py:obj:`torchmetrics.Metric`

   Base class for all metrics present in the Metrics API.

   Implements ``add_state()``, ``forward()``, ``reset()`` and a few other things to
   handle distributed synchronization and per-step metric computation.

   Override ``update()`` and ``compute()`` functions to implement your own metric. Use
   ``add_state()`` to register metric state variables which keep track of state on each
   call of ``update()`` and are synchronized across processes when ``compute()`` is called.

   Note:
       Metric state variables can either be :class:`~torch.Tensor` or an empty list which can we used
       to store :class:`~torch.Tensor`.

   Note:
       Different metrics only override ``update()`` and not ``forward()``. A call to ``update()``
       is valid, but it won't return the metric value at the current step. A call to ``forward()``
       automatically calls ``update()`` and also returns the metric value at the current step.

   Args:
       kwargs: additional keyword arguments, see :ref:`Metric kwargs` for more info.

           - compute_on_cpu: If metric state should be stored on CPU during computations. Only works
               for list states.
           - dist_sync_on_step: If metric state should synchronize on ``forward()``. Default is ``False``
           - process_group: The process group on which the synchronization is called. Default is the world.
           - dist_sync_fn: function that performs the allgather option on the metric state. Default is an
               custom implementation that calls ``torch.distributed.all_gather`` internally.
           - distributed_available_fn: function that checks if the distributed backend is available.
               Defaults to a check of ``torch.distributed.is_available()`` and ``torch.distributed.is_initialized()``.
           - sync_on_compute: If metric state should synchronize when ``compute`` is called. Default is ``True``-

   Initializes internal Module state, shared by both nn.Module and ScriptModule.

   .. py:method:: set_idx(idx)


   .. py:method:: update(preds, target)

      Override this method to update the state variables of your metric class.


   .. py:method:: __str__()

      Return str(self).


   .. py:method:: compute()

      Override this method to compute the final metric value from state variables synchronized across the
      distributed backend.



.. py:class:: NNModule(n_classes=4, learned_billinear=False, clip=0.1, class_weights=None)


   Bases: :py:obj:`pytorch_lightning.LightningModule`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   Initializes internal Module state, shared by both nn.Module and ScriptModule.

   .. py:method:: cross_entropy_loss(input, target, weight=None, ignore_index=255)

      Use 255 to fill empty values when padding or doing any augmentation operations
      like rotation.


   .. py:method:: configure_optimizers()

      Choose what optimizers and learning-rate schedulers to use in your optimization. Normally you'd need
      one. But in the case of GANs or similar you might have multiple. Optimization with multiple optimizers only
      works in the manual optimization mode.

      Return:
          Any of these 6 options.

          - **Single optimizer**.
          - **List or Tuple** of optimizers.
          - **Two lists** - The first list has multiple optimizers, and the second has multiple LR schedulers
            (or multiple ``lr_scheduler_config``).
          - **Dictionary**, with an ``"optimizer"`` key, and (optionally) a ``"lr_scheduler"``
            key whose value is a single LR scheduler or ``lr_scheduler_config``.
          - **None** - Fit will run without any optimizer.

      The ``lr_scheduler_config`` is a dictionary which contains the scheduler and its associated configuration.
      The default configuration is shown below.

      .. code-block:: python

          lr_scheduler_config = {
              # REQUIRED: The scheduler instance
              "scheduler": lr_scheduler,
              # The unit of the scheduler's step size, could also be 'step'.
              # 'epoch' updates the scheduler on epoch end whereas 'step'
              # updates it after a optimizer update.
              "interval": "epoch",
              # How many epochs/steps should pass between calls to
              # `scheduler.step()`. 1 corresponds to updating the learning
              # rate after every epoch/step.
              "frequency": 1,
              # Metric to to monitor for schedulers like `ReduceLROnPlateau`
              "monitor": "val_loss",
              # If set to `True`, will enforce that the value specified 'monitor'
              # is available when the scheduler is updated, thus stopping
              # training if not found. If set to `False`, it will only produce a warning
              "strict": True,
              # If using the `LearningRateMonitor` callback to monitor the
              # learning rate progress, this keyword can be used to specify
              # a custom logged name
              "name": None,
          }

      When there are schedulers in which the ``.step()`` method is conditioned on a value, such as the
      :class:`torch.optim.lr_scheduler.ReduceLROnPlateau` scheduler, Lightning requires that the
      ``lr_scheduler_config`` contains the keyword ``"monitor"`` set to the metric name that the scheduler
      should be conditioned on.

      .. testcode::

          # The ReduceLROnPlateau scheduler requires a monitor
          def configure_optimizers(self):
              optimizer = Adam(...)
              return {
                  "optimizer": optimizer,
                  "lr_scheduler": {
                      "scheduler": ReduceLROnPlateau(optimizer, ...),
                      "monitor": "metric_to_track",
                      "frequency": "indicates how often the metric is updated"
                      # If "monitor" references validation metrics, then "frequency" should be set to a
                      # multiple of "trainer.check_val_every_n_epoch".
                  },
              }


          # In the case of two optimizers, only one using the ReduceLROnPlateau scheduler
          def configure_optimizers(self):
              optimizer1 = Adam(...)
              optimizer2 = SGD(...)
              scheduler1 = ReduceLROnPlateau(optimizer1, ...)
              scheduler2 = LambdaLR(optimizer2, ...)
              return (
                  {
                      "optimizer": optimizer1,
                      "lr_scheduler": {
                          "scheduler": scheduler1,
                          "monitor": "metric_to_track",
                      },
                  },
                  {"optimizer": optimizer2, "lr_scheduler": scheduler2},
              )

      Metrics can be made available to monitor by simply logging it using
      ``self.log('metric_to_track', metric_val)`` in your :class:`~pytorch_lightning.core.module.LightningModule`.

      Note:
          Some things to know:

          - Lightning calls ``.backward()`` and ``.step()`` automatically in case of automatic optimization.
          - If a learning rate scheduler is specified in ``configure_optimizers()`` with key
            ``"interval"`` (default "epoch") in the scheduler configuration, Lightning will call
            the scheduler's ``.step()`` method automatically in case of automatic optimization.
          - If you use 16-bit precision (``precision=16``), Lightning will automatically handle the optimizer.
          - If you use :class:`torch.optim.LBFGS`, Lightning handles the closure function automatically for you.
          - If you use multiple optimizers, you will have to switch to 'manual optimization' mode and step them
            yourself.
          - If you need to control how often the optimizer steps, override the :meth:`optimizer_step` hook.


   .. py:method:: training_step(batch, batch_idx)

      Here you compute and return the training loss and some additional metrics for e.g. the progress bar or
      logger.

      Args:
          batch (:class:`~torch.Tensor` | (:class:`~torch.Tensor`, ...) | [:class:`~torch.Tensor`, ...]):
              The output of your :class:`~torch.utils.data.DataLoader`. A tensor, tuple or list.
          batch_idx (``int``): Integer displaying index of this batch

      Return:
          Any of.

          - :class:`~torch.Tensor` - The loss tensor
          - ``dict`` - A dictionary. Can include any keys, but must include the key ``'loss'``
          - ``None`` - Training will skip to the next batch. This is only for automatic optimization.
              This is not supported for multi-GPU, TPU, IPU, or DeepSpeed.

      In this step you'd normally do the forward pass and calculate the loss for a batch.
      You can also do fancier things like multiple forward passes or something model specific.

      Example::

          def training_step(self, batch, batch_idx):
              x, y, z = batch
              out = self.encoder(x)
              loss = self.loss(out, x)
              return loss

      To use multiple optimizers, you can switch to 'manual optimization' and control their stepping:

      .. code-block:: python

          def __init__(self):
              super().__init__()
              self.automatic_optimization = False


          # Multiple optimizers (e.g.: GANs)
          def training_step(self, batch, batch_idx):
              opt1, opt2 = self.optimizers()

              # do training_step with encoder
              ...
              opt1.step()
              # do training_step with decoder
              ...
              opt2.step()

      Note:
          When ``accumulate_grad_batches`` > 1, the loss returned here will be automatically
          normalized by ``accumulate_grad_batches`` internally.


   .. py:method:: test_step(test_batch, batch_idx)

      Operates on a single batch of data from the test set. In this step you'd normally generate examples or
      calculate anything of interest such as accuracy.

      Args:
          batch: The output of your :class:`~torch.utils.data.DataLoader`.
          batch_idx: The index of this batch.
          dataloader_id: The index of the dataloader that produced this batch.
              (only if multiple test dataloaders used).

      Return:
         Any of.

          - Any object or value
          - ``None`` - Testing will skip to the next batch

      .. code-block:: python

          # if you have one test dataloader:
          def test_step(self, batch, batch_idx):
              ...


          # if you have multiple test dataloaders:
          def test_step(self, batch, batch_idx, dataloader_idx=0):
              ...

      Examples::

          # CASE 1: A single test dataset
          def test_step(self, batch, batch_idx):
              x, y = batch

              # implement your own
              out = self(x)
              loss = self.loss(out, y)

              # log 6 example images
              # or generated text... or whatever
              sample_imgs = x[:6]
              grid = torchvision.utils.make_grid(sample_imgs)
              self.logger.experiment.add_image('example_images', grid, 0)

              # calculate acc
              labels_hat = torch.argmax(out, dim=1)
              test_acc = torch.sum(y == labels_hat).item() / (len(y) * 1.0)

              # log the outputs!
              self.log_dict({'test_loss': loss, 'test_acc': test_acc})

      If you pass in multiple test dataloaders, :meth:`test_step` will have an additional argument. We recommend
      setting the default value of 0 so that you can quickly switch between single and multiple dataloaders.

      .. code-block:: python

          # CASE 2: multiple test dataloaders
          def test_step(self, batch, batch_idx, dataloader_idx=0):
              # dataloader_idx tells you which dataset this is.
              ...

      Note:
          If you don't need to test you don't need to implement this method.

      Note:
          When the :meth:`test_step` is called, the model has been put in eval mode and
          PyTorch gradients have been disabled. At the end of the test epoch, the model goes back
          to training mode and gradients are enabled.



.. py:class:: TorchPatchDeConvNet(n_classes=4, learned_billinear=False, clip=0.1, class_weights=None)


   Bases: :py:obj:`NNModule`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   Initializes internal Module state, shared by both nn.Module and ScriptModule.

   .. py:method:: forward(x)

      Same as :meth:`torch.nn.Module.forward`.

      Args:
          *args: Whatever you decide to pass into the forward method.
          **kwargs: Keyword arguments are also possible.

      Return:
          Your model's output


   .. py:method:: init_vgg16_params(vgg16, copy_fc8=True)


   .. py:method:: load()

      This is just a no-op load method. 



.. py:class:: TorchPatchDeConvNetSkip(n_classes=4, learned_billinear=False, clip=0.1, class_weights=None)


   Bases: :py:obj:`NNModule`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   Initializes internal Module state, shared by both nn.Module and ScriptModule.

   .. py:method:: forward(x)

      Same as :meth:`torch.nn.Module.forward`.

      Args:
          *args: Whatever you decide to pass into the forward method.
          **kwargs: Keyword arguments are also possible.

      Return:
          Your model's output


   .. py:method:: init_vgg16_params(vgg16, copy_fc8=True)


   .. py:method:: load()

      This is just a no-op load method. 



.. py:class:: TorchSectionDeConvNet(n_classes=4, learned_billinear=False, clip=0.1, class_weights=False)


   Bases: :py:obj:`NNModule`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   Initializes internal Module state, shared by both nn.Module and ScriptModule.

   .. py:method:: forward(x)

      Same as :meth:`torch.nn.Module.forward`.

      Args:
          *args: Whatever you decide to pass into the forward method.
          **kwargs: Keyword arguments are also possible.

      Return:
          Your model's output


   .. py:method:: init_vgg16_params(vgg16, copy_fc8=True)


   .. py:method:: load()

      This is just a no-op load method. 



.. py:class:: TorchSectionDeConvNetSkip(n_classes=4, learned_billinear=False, clip=0.1, class_weights=None)


   Bases: :py:obj:`NNModule`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   Initializes internal Module state, shared by both nn.Module and ScriptModule.

   .. py:method:: forward(x)

      Same as :meth:`torch.nn.Module.forward`.

      Args:
          *args: Whatever you decide to pass into the forward method.
          **kwargs: Keyword arguments are also possible.

      Return:
          Your model's output


   .. py:method:: init_vgg16_params(vgg16, copy_fc8=True)


   .. py:method:: load()

      This is just a no-op load method. 



